
Opdracht_Week3_B_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000250  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000250  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000027f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b51  00000000  00000000  000002b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000866  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000302  00000000  00000000  0000166e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001970  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cd  00000000  00000000  00001c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001d8  000001d8  0000024c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_9 000000ae  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.wait    0000001e  00000198  00000198  0000020c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.timer2Init 0000000e  000001ca  000001ca  0000023e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000014  000001b6  000001b6  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.turnOff  00000002  00800102  00800102  00000250  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
   8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
   c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  24:	0c 94 75 00 	jmp	0xea	; 0xea <_etext>
  28:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  34:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  3c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  64:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  74:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  80:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  84:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 04       	cpc	r0, r1
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

000001d8 <__bad_interrupt>:
 1d8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_9:

000000ea <__vector_9>:
#define BIT(x)(1 << (x))

int msCount;
int turnOff = 0;

ISR( TIMER2_COMP_vect ) {
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
	msCount++;
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (msCount == 15 && turnOff == 0)
 10e:	8f 30       	cpi	r24, 0x0F	; 15
 110:	91 05       	cpc	r25, r1
 112:	e1 f4       	brne	.+56     	; 0x14c <__vector_9+0x62>
 114:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_end>
 118:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_end+0x1>
 11c:	23 2b       	or	r18, r19
 11e:	b1 f4       	brne	.+44     	; 0x14c <__vector_9+0x62>
	{
		PORTD ^= BIT(7);
 120:	82 b3       	in	r24, 0x12	; 18
 122:	80 58       	subi	r24, 0x80	; 128
 124:	82 bb       	out	0x12, r24	; 18
		msCount = 0;
 126:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		turnOff = !turnOff;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_end>
 136:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_end+0x1>
 13a:	23 2b       	or	r18, r19
 13c:	11 f0       	breq	.+4      	; 0x142 <__vector_9+0x58>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_end+0x1>
 146:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_end>
 14a:	1d c0       	rjmp	.+58     	; 0x186 <__vector_9+0x9c>
	}else if (msCount == 25 && turnOff == 1)
 14c:	49 97       	sbiw	r24, 0x19	; 25
 14e:	d9 f4       	brne	.+54     	; 0x186 <__vector_9+0x9c>
 150:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_end>
 154:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_end+0x1>
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	a9 f4       	brne	.+42     	; 0x186 <__vector_9+0x9c>
	{
		PORTD ^= BIT(7);
 15c:	82 b3       	in	r24, 0x12	; 18
 15e:	80 58       	subi	r24, 0x80	; 128
 160:	82 bb       	out	0x12, r24	; 18
		msCount = 0;
 162:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 166:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		turnOff = !turnOff;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_end>
 172:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_end+0x1>
 176:	23 2b       	or	r18, r19
 178:	11 f0       	breq	.+4      	; 0x17e <__vector_9+0x94>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_end+0x1>
 182:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_end>
	}
}
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

Disassembly of section .text.wait:

00000198 <wait>:

void wait( int ms ) {
	for (int tms=0; tms<ms; tms++) {
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	ef ec       	ldi	r30, 0xCF	; 207
 1a0:	f7 e0       	ldi	r31, 0x07	; 7
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <wait+0xa>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <wait+0x10>
 1a8:	00 00       	nop
 1aa:	2f 5f       	subi	r18, 0xFF	; 255
 1ac:	3f 4f       	sbci	r19, 0xFF	; 255
 1ae:	28 17       	cp	r18, r24
 1b0:	39 07       	cpc	r19, r25
 1b2:	ac f3       	brlt	.-22     	; 0x19e <wait+0x6>
		_delay_ms( 1 );			// library function (max 30 ms at 8MHz)
	}
}
 1b4:	08 95       	ret

Disassembly of section .text.timer2Init:

000001ca <timer2Init>:

void timer2Init( void ) {
	//OCR2 = CompareValue;			// Compare value of counter 2
	TIMSK |= BIT(7);				// T2 compare match interrupt enable
 1ca:	87 b7       	in	r24, 0x37	; 55
 1cc:	80 68       	ori	r24, 0x80	; 128
 1ce:	87 bf       	out	0x37, r24	; 55
	sei();							// turn_on intr all
 1d0:	78 94       	sei
	TCCR2 = (1<<CS10) | (1<<CS12);			// Initialize T2: ext.counting, rising edge, compare output mode, CTC, RUN
 1d2:	85 e0       	ldi	r24, 0x05	; 5
 1d4:	85 bd       	out	0x25, r24	; 37
 1d6:	08 95       	ret

Disassembly of section .text.main:

000001b6 <main>:
}

int main(void)
{
	
	DDRD |= BIT(7);
 1b6:	81 b3       	in	r24, 0x11	; 17
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	81 bb       	out	0x11, r24	; 17
	//DDRB |= (1 << 0); // Set  LED as  output
	timer2Init();
 1bc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <timer2Init>
	//TCCR1B  |= (1 << CS12); // Set up  timer
	
    while(1)
    {
        //TODO:: Please write your application code
		wait(10);
 1c0:	8a e0       	ldi	r24, 0x0A	; 10
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 cc 00 	call	0x198	; 0x198 <wait>
 1c8:	fb cf       	rjmp	.-10     	; 0x1c0 <main+0xa>
