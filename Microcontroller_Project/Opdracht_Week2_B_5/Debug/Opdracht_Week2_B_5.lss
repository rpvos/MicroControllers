
Opdracht_Week2_B_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  0000020f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000e95  00000000  00000000  0000026f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000008e2  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000038b  00000000  00000000  000019e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00001d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000028a  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000186  00000000  00000000  000020ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00002234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000188  00000188  000001dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002274  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_flush 00000026  0000010a  0000010a  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_write_char 00000022  00000130  00000130  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.init    00000030  000000aa  000000aa  000000fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.display_text 0000001a  0000016e  0000016e  000001c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .progmemx.data 00000006  000000a4  000000a4  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 18 .text.main    00000030  000000da  000000da  0000012e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.libgcc  0000001c  00000152  00000152  000001a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
   8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
   c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  54:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  58:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  5c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  60:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  64:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  68:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  6c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  70:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  74:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  78:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  7c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  80:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  84:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  88:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 6d 00 	call	0xda	; 0xda <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000188 <__bad_interrupt>:
 188:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_flush:

0000010a <lcd_flush>:
#define  RS 0x08;
	// D4/7 = data pins
	

void lcd_flush(void) {
	PORTA |= E;				// pin high but keep all other values
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	8f ec       	ldi	r24, 0xCF	; 207
 112:	97 e0       	ldi	r25, 0x07	; 7
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_flush+0xa>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_flush+0x10>
 11a:	00 00       	nop
	_delay_ms(1);			
	PORTA &= ~E;  			// pin low but keep all other values
 11c:	8b b3       	in	r24, 0x1b	; 27
 11e:	8f 7d       	andi	r24, 0xDF	; 223
 120:	8b bb       	out	0x1b, r24	; 27
 122:	8f ec       	ldi	r24, 0xCF	; 207
 124:	97 e0       	ldi	r25, 0x07	; 7
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_flush+0x1c>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_flush+0x22>
 12c:	00 00       	nop
 12e:	08 95       	ret

Disassembly of section .text.lcd_write_char:

00000130 <lcd_write_char>:
	_delay_ms(1);			
}

void lcd_write_char(unsigned char byte) {
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	c8 2f       	mov	r28, r24
	// First part
	PORTC = byte;
 136:	85 bb       	out	0x15, r24	; 21
	PORTA = RS;
 138:	d8 e0       	ldi	r29, 0x08	; 8
 13a:	db bb       	out	0x1b, r29	; 27
	lcd_flush();
 13c:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_flush>

	// Second part
	PORTC = (byte<<4);
 140:	c2 95       	swap	r28
 142:	c0 7f       	andi	r28, 0xF0	; 240
 144:	c5 bb       	out	0x15, r28	; 21
	PORTA = RS;
 146:	db bb       	out	0x1b, r29	; 27
	lcd_flush();
 148:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_flush>
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

Disassembly of section .text.init:

000000aa <init>:

void init(void) {
	// Set all the needed pins to output and set them low
	DDRD = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
  ae:	8a bb       	out	0x1a, r24	; 26
	PORTD = 0x00;
  b0:	12 ba       	out	0x12, r1	; 18
	PORTA = 0x00;
  b2:	1b ba       	out	0x1b, r1	; 27

	// Step 2 set the lcd to (4-bit interface, 1 line, 5*7 Pixels)
	PORTD = 0x20;
  b4:	80 e2       	ldi	r24, 0x20	; 32
  b6:	82 bb       	out	0x12, r24	; 18
	lcd_flush();
  b8:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_flush>

	// Step 3 set display mode to 0x06
	PORTC = 0x00;   
  bc:	15 ba       	out	0x15, r1	; 21
	lcd_flush();
  be:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_flush>
	PORTC = 0x60;
  c2:	80 e6       	ldi	r24, 0x60	; 96
  c4:	85 bb       	out	0x15, r24	; 21
	lcd_flush();
  c6:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_flush>

	// Step 4 Set cursor and display on
	PORTC = 0x00;   
  ca:	15 ba       	out	0x15, r1	; 21
	lcd_flush();
  cc:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_flush>
	PORTC = 0xF0;
  d0:	80 ef       	ldi	r24, 0xF0	; 240
  d2:	85 bb       	out	0x15, r24	; 21
	lcd_flush();	
  d4:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_flush>
  d8:	08 95       	ret

Disassembly of section .text.display_text:

0000016e <display_text>:
}

void display_text(char *str){
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
	for(;*str; str++){
 174:	03 c0       	rjmp	.+6      	; 0x17c <display_text+0xe>
		lcd_write_char(*str);
 176:	0e 94 98 00 	call	0x130	; 0x130 <lcd_write_char>
	PORTC = 0xF0;
	lcd_flush();	
}

void display_text(char *str){
	for(;*str; str++){
 17a:	21 96       	adiw	r28, 0x01	; 1
 17c:	88 81       	ld	r24, Y
 17e:	81 11       	cpse	r24, r1
 180:	fa cf       	rjmp	.-12     	; 0x176 <display_text+0x8>
		lcd_write_char(*str);
	}
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

Disassembly of section .text.main:

000000da <main>:
 */ 

#include "lcd.h"

int main(void)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <main+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x8>
  e2:	00 d0       	rcall	.+0      	; 0xe4 <main+0xa>
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
	init();
  e8:	0e 94 55 00 	call	0xaa	; 0xaa <init>
	
	char text[] = "hello";
  ec:	24 ea       	ldi	r18, 0xA4	; 164
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	86 e0       	ldi	r24, 0x06	; 6
  f4:	f9 01       	movw	r30, r18
  f6:	de 01       	movw	r26, r28
  f8:	11 96       	adiw	r26, 0x01	; 1
  fa:	74 2f       	mov	r23, r20
  fc:	0e 94 a9 00 	call	0x152	; 0x152 <__movmemx_qi>
	display_text(text);
 100:	ce 01       	movw	r24, r28
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	0e 94 b7 00 	call	0x16e	; 0x16e <display_text>
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0x2e>

Disassembly of section .text.libgcc:

00000152 <__movmemx_qi>:
 152:	99 27       	eor	r25, r25

00000154 <__movmemx_hi>:
 154:	77 fd       	sbrc	r23, 7
 156:	06 c0       	rjmp	.+12     	; 0x164 <__movmemx_hi+0x10>
 158:	7b bf       	out	0x3b, r23	; 59
 15a:	07 90       	elpm	r0, Z+
 15c:	0d 92       	st	X+, r0
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	e1 f7       	brne	.-8      	; 0x15a <__movmemx_hi+0x6>
 162:	08 95       	ret
 164:	01 90       	ld	r0, Z+
 166:	0d 92       	st	X+, r0
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	e1 f7       	brne	.-8      	; 0x164 <__movmemx_hi+0x10>
 16c:	08 95       	ret
