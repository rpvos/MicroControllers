
Opdracht_Week1_B_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000195  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b3b  00000000  00000000  000001bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000825  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002b4  00000000  00000000  0000151d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000009e  00000000  00000000  00001a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000010e  0000010e  00000162  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000000f0  000000f0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    0000004c  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  6c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  70:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  74:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  7c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  80:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  84:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  88:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

000000f0 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	08 c0       	rjmp	.+16     	; 0x106 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	ef ec       	ldi	r30, 0xCF	; 207
  f8:	f7 e0       	ldi	r31, 0x07	; 7
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <wait+0xa>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <wait+0x10>
 100:	00 00       	nop
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	3f 4f       	sbci	r19, 0xFF	; 255
 106:	28 17       	cp	r18, r24
 108:	39 07       	cpc	r19, r25
 10a:	ac f3       	brlt	.-22     	; 0xf6 <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 10c:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:
notes:			Looping forever, flipping bits on PORTD
Version :    	DMK, Initial code
*******************************************************************/
{
	
	DDRD = 0b11111111;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	81 bb       	out	0x11, r24	; 17
	int speed = 0;			// All pins PORTD are set to output 
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (1)
	{
 		if (PINC & 0x01) {
  ac:	98 9b       	sbis	0x13, 0	; 19
  ae:	06 c0       	rjmp	.+12     	; 0xbc <main+0x18>
 			speed = !speed;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	cd 2b       	or	r28, r29
  b4:	09 f0       	breq	.+2      	; 0xb8 <main+0x14>
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	c8 2f       	mov	r28, r24
  ba:	d0 e0       	ldi	r29, 0x00	; 0
 		}
		if (speed)
  bc:	20 97       	sbiw	r28, 0x00	; 0
  be:	61 f0       	breq	.+24     	; 0xd8 <main+0x34>
		{
			PORTD = 0x80;
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	82 bb       	out	0x12, r24	; 18
			wait(250);
  c4:	8a ef       	ldi	r24, 0xFA	; 250
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 78 00 	call	0xf0	; 0xf0 <wait>
			PORTD = 0x00; // Turn all lights off
  cc:	12 ba       	out	0x12, r1	; 18
			wait(250);
  ce:	8a ef       	ldi	r24, 0xFA	; 250
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 78 00 	call	0xf0	; 0xf0 <wait>
  d6:	ea cf       	rjmp	.-44     	; 0xac <main+0x8>
		}else{
			PORTD = 0x80;			// Write 10101010b PORTD
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	82 bb       	out	0x12, r24	; 18
			wait( 1000 );
  dc:	88 ee       	ldi	r24, 0xE8	; 232
  de:	93 e0       	ldi	r25, 0x03	; 3
  e0:	0e 94 78 00 	call	0xf0	; 0xf0 <wait>
			PORTD = 0x00;			// Write 01010101b PORTD
  e4:	12 ba       	out	0x12, r1	; 18
			wait( 1000 );
  e6:	88 ee       	ldi	r24, 0xE8	; 232
  e8:	93 e0       	ldi	r25, 0x03	; 3
  ea:	0e 94 78 00 	call	0xf0	; 0xf0 <wait>
  ee:	de cf       	rjmp	.-68     	; 0xac <main+0x8>
