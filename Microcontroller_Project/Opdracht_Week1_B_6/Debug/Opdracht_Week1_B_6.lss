
Opdracht_Week1_B_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  0000018d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000df6  00000000  00000000  000001b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000aad  00000000  00000000  00000fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002b4  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00001d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000039f  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000009e  00000000  00000000  000020df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000217d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000106  00000106  0000015a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002198  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000000e8  000000e8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    0000003c  000000ac  000000ac  00000100  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	0e 94 56 00 	call	0xac	; 0xac <_etext>
  a4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>

Disassembly of section .text:

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

000000e8 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	08 c0       	rjmp	.+16     	; 0xfe <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	ef ec       	ldi	r30, 0xCF	; 207
  f0:	f7 e0       	ldi	r31, 0x07	; 7
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <wait+0xa>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <wait+0x10>
  f8:	00 00       	nop
  fa:	2f 5f       	subi	r18, 0xFF	; 255
  fc:	3f 4f       	sbci	r19, 0xFF	; 255
  fe:	28 17       	cp	r18, r24
 100:	39 07       	cpc	r19, r25
 102:	ac f3       	brlt	.-22     	; 0xee <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 104:	08 95       	ret

Disassembly of section .text.main:

000000ac <main>:
notes:			Looping forever, flipping bits on PORTD
Version :    	DMK, Initial code
*******************************************************************/
{
	
	DDRD = 0b11111111;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8a b9       	out	0x0a, r24	; 10
	int speed = 0;			// All pins PORTD are set to output 
  b0:	c0 e0       	ldi	r28, 0x00	; 0
  b2:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (1)
	{
		if (PINC & 0x01) {
  b4:	30 9b       	sbis	0x06, 0	; 6
  b6:	06 c0       	rjmp	.+12     	; 0xc4 <main+0x18>
			speed = !speed;
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	cd 2b       	or	r28, r29
  bc:	09 f0       	breq	.+2      	; 0xc0 <main+0x14>
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	c8 2f       	mov	r28, r24
  c2:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (speed)
  c4:	20 97       	sbiw	r28, 0x00	; 0
  c6:	41 f0       	breq	.+16     	; 0xd8 <main+0x2c>
		{
			PORTD = 0x80;
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	8b b9       	out	0x0b, r24	; 11
			wait(250);
  cc:	8a ef       	ldi	r24, 0xFA	; 250
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 74 00 	call	0xe8	; 0xe8 <wait>
			PORTD = 0x00;			// Turn all lights off
  d4:	1b b8       	out	0x0b, r1	; 11
  d6:	ee cf       	rjmp	.-36     	; 0xb4 <main+0x8>
	
		}else{
			PORTD = 0x80;
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	8b b9       	out	0x0b, r24	; 11
			wait(1000);
  dc:	88 ee       	ldi	r24, 0xE8	; 232
  de:	93 e0       	ldi	r25, 0x03	; 3
  e0:	0e 94 74 00 	call	0xe8	; 0xe8 <wait>
			PORTD = 0x00;
  e4:	1b b8       	out	0x0b, r1	; 11
  e6:	e6 cf       	rjmp	.-52     	; 0xb4 <main+0x8>
