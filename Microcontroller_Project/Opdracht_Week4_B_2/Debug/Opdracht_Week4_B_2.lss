
Opdracht_Week4_B_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000226  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00000255  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b7e  00000000  00000000  0000028d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000866  00000000  00000000  00000e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002f2  00000000  00000000  00001671  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000cd  00000000  00000000  00001c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001ae  000001ae  00000222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_1 00000040  00000146  00000146  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.wait    0000001e  00000186  00000186  000001fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.adcInit 0000000a  000001a4  000001a4  00000218  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000005c  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.enabled  00000002  00800100  00800100  00000226  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_1>
   8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  14:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  18:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  1c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  20:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  24:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  28:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  2c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  30:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  3c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  40:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  44:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  4c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  50:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  54:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  58:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  5c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  60:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  64:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  68:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  6c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  70:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  74:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  78:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  7c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  80:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  84:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  88:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 75 00 	call	0xea	; 0xea <_etext>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

000001ae <__bad_interrupt>:
 1ae:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_1:

00000146 <__vector_1>:
#include <avr/interrupt.h>

#define BIT(x)	(1 << (x))
int enabled = 0;

ISR(INT0_vect){
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
	enabled = !enabled;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 160:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 164:	23 2b       	or	r18, r19
 166:	11 f0       	breq	.+4      	; 0x16c <__vector_1+0x26>
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	3f 91       	pop	r19
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

Disassembly of section .text.wait:

00000186 <wait>:

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	08 c0       	rjmp	.+16     	; 0x19c <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	e9 ef       	ldi	r30, 0xF9	; 249
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <wait+0xa>
 194:	00 c0       	rjmp	.+0      	; 0x196 <wait+0x10>
 196:	00 00       	nop
 198:	2f 5f       	subi	r18, 0xFF	; 255
 19a:	3f 4f       	sbci	r19, 0xFF	; 255
 19c:	28 17       	cp	r18, r24
 19e:	39 07       	cpc	r19, r25
 1a0:	ac f3       	brlt	.-22     	; 0x18c <wait+0x6>
	{
		_delay_ms( 1 );			// library function (max 30 ms at 8MHz)
	}
}
 1a2:	08 95       	ret

Disassembly of section .text.adcInit:

000001a4 <adcInit>:


// Initialize ADC: 10-bits (left justified), free running
void adcInit( void )
{
	ADMUX = 0b01100001;			// AREF=VCC, result left adjusted, channel1 at pin PF1
 1a4:	81 e6       	ldi	r24, 0x61	; 97
 1a6:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11100110;		// ADC-enable, no interrupt, start, free running, division by 64
 1a8:	86 ee       	ldi	r24, 0xE6	; 230
 1aa:	86 b9       	out	0x06, r24	; 6
 1ac:	08 95       	ret

Disassembly of section .text.main:

000000ea <main>:


// Main program: ADC at PF1
int main( void )
{
	DDRD = 0x00;				// set PORTD for input
  ea:	11 ba       	out	0x11, r1	; 17
	DDRF = 0x00;				// set PORTF for input (ADC)
  ec:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0xFF;				// set PORTA for output
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;				// set PORTB for output
  f4:	87 bb       	out	0x17, r24	; 23
	adcInit();					// initialize ADC
  f6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <adcInit>
	
	EICRA |= 0x0B;			// INT1 falling edge, INT0 rising edge
  fa:	ea e6       	ldi	r30, 0x6A	; 106
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8b 60       	ori	r24, 0x0B	; 11
 102:	80 83       	st	Z, r24
	EIMSK |= 0x03;			// Enable INT1 & INT0
 104:	89 b7       	in	r24, 0x39	; 57
 106:	83 60       	ori	r24, 0x03	; 3
 108:	89 bf       	out	0x39, r24	; 57
	
	// Enable global interrupt system
	//SREG = 0x80;			// Of direct via SREG of via wrapper
	sei();
 10a:	78 94       	sei

	while (1)
	{
		if(enabled){
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 110:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 114:	89 2b       	or	r24, r25
 116:	91 f0       	breq	.+36     	; 0x13c <main+0x52>
			PORTB = ADCL;			// Show MSB/LSB (bit 10:0) of ADC
 118:	84 b1       	in	r24, 0x04	; 4
 11a:	88 bb       	out	0x18, r24	; 24
			PORTA = ADCH;
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	8b bb       	out	0x1b, r24	; 27
			enabled = !enabled;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12c:	23 2b       	or	r18, r19
 12e:	11 f0       	breq	.+4      	; 0x134 <main+0x4a>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		wait(100);				// every 100 ms (busy waiting)
 13c:	84 e6       	ldi	r24, 0x64	; 100
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 c3 00 	call	0x186	; 0x186 <wait>
	}
 144:	e3 cf       	rjmp	.-58     	; 0x10c <main+0x22>
