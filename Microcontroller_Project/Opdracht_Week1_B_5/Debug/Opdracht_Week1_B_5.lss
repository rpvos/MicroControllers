
Opdracht_Week1_B_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ca  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  000001f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b8e  00000000  00000000  00000221  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000844  00000000  00000000  00000daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ee  00000000  00000000  000015f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000048  00000000  00000000  000018e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000014e  00000000  00000000  00001ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00001cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000172  00000172  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000154  00000154  000001a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    000000b0  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
   8:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
   c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  10:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  14:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  18:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  1c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  20:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  24:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  28:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  2c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  30:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  34:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  38:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  3c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  40:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  44:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  48:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  4c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  50:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  54:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  58:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  5c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  60:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  64:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  68:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  6c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  70:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  74:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  78:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  7c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  80:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  84:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
  88:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000172 <__bad_interrupt>:
 172:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.wait:

00000154 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	08 c0       	rjmp	.+16     	; 0x16a <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	ef ec       	ldi	r30, 0xCF	; 207
 15c:	f7 e0       	ldi	r31, 0x07	; 7
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <wait+0xa>
 162:	00 c0       	rjmp	.+0      	; 0x164 <wait+0x10>
 164:	00 00       	nop
 166:	2f 5f       	subi	r18, 0xFF	; 255
 168:	3f 4f       	sbci	r19, 0xFF	; 255
 16a:	28 17       	cp	r18, r24
 16c:	39 07       	cpc	r19, r25
 16e:	ac f3       	brlt	.-22     	; 0x15a <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 170:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:

int main(void)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	ce 5f       	subi	r28, 0xFE	; 254
  ae:	d1 40       	sbci	r29, 0x01	; 1
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    
	    
	    DDRD = 0b11111111;			// All pins PORTD are set to output
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	81 bb       	out	0x11, r24	; 17
		// Boolean that contains when it is enabling more lights and when it is not
	    int statement = 1;
		// Lights array which lights to turn on at a given time
	    int lights[0xff];
	    
	    for (int i = 0; i < 0xff; i++)
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
	    
	    DDRD = 0b11111111;			// All pins PORTD are set to output
	    
	    int var = 0;
		// Boolean that contains when it is enabling more lights and when it is not
	    int statement = 1;
  c2:	41 e0       	ldi	r20, 0x01	; 1
  c4:	50 e0       	ldi	r21, 0x00	; 0
{
    
	    
	    DDRD = 0b11111111;			// All pins PORTD are set to output
	    
	    int var = 0;
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
		// Boolean that contains when it is enabling more lights and when it is not
	    int statement = 1;
		// Lights array which lights to turn on at a given time
	    int lights[0xff];
	    
	    for (int i = 0; i < 0xff; i++)
  ca:	27 c0       	rjmp	.+78     	; 0x11a <main+0x76>
	    {
		    lights[i] = var;
  cc:	f9 01       	movw	r30, r18
  ce:	ee 0f       	add	r30, r30
  d0:	ff 1f       	adc	r31, r31
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	6c 0f       	add	r22, r28
  d8:	7d 1f       	adc	r23, r29
  da:	e6 0f       	add	r30, r22
  dc:	f7 1f       	adc	r31, r23
  de:	91 83       	std	Z+1, r25	; 0x01
  e0:	80 83       	st	Z, r24
		    if (statement)
  e2:	41 15       	cp	r20, r1
  e4:	51 05       	cpc	r21, r1
  e6:	69 f0       	breq	.+26     	; 0x102 <main+0x5e>
		    {
				// Add new light to the start
			    var= var<<1;
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
			    var+=1;
  ec:	01 96       	adiw	r24, 0x01	; 1
			    
				// If all lights are on we go to subtract mode
			    if (var==0xff){
  ee:	8f 3f       	cpi	r24, 0xFF	; 255
  f0:	91 05       	cpc	r25, r1
  f2:	89 f4       	brne	.+34     	; 0x116 <main+0x72>
				    statement = !statement;
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	45 2b       	or	r20, r21
  f8:	09 f0       	breq	.+2      	; 0xfc <main+0x58>
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	46 2f       	mov	r20, r22
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	0a c0       	rjmp	.+20     	; 0x116 <main+0x72>
			    }
			    
			 }else{
				 // Remove one light from the start
			    var= var<<1;
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
				
				// If the lights are all of we turn them back on slowly
			    if (var==0)
 106:	00 97       	sbiw	r24, 0x00	; 0
 108:	31 f4       	brne	.+12     	; 0x116 <main+0x72>
			    {
				    statement = !statement;
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	45 2b       	or	r20, r21
 10e:	09 f0       	breq	.+2      	; 0x112 <main+0x6e>
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	46 2f       	mov	r20, r22
 114:	50 e0       	ldi	r21, 0x00	; 0
		// Boolean that contains when it is enabling more lights and when it is not
	    int statement = 1;
		// Lights array which lights to turn on at a given time
	    int lights[0xff];
	    
	    for (int i = 0; i < 0xff; i++)
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	2f 3f       	cpi	r18, 0xFF	; 255
 11c:	31 05       	cpc	r19, r1
 11e:	b4 f2       	brlt	.-84     	; 0xcc <main+0x28>
 120:	00 e0       	ldi	r16, 0x00	; 0
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <main+0x86>
		    PORTD = lights[var];
		    var++;
		    
		    if (var>=0xff)
		    {
			    var=0;
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	10 e0       	ldi	r17, 0x00	; 0
	    var = 0;
	    
		
	    while (1)
	    {
		    wait(100);
 12a:	84 e6       	ldi	r24, 0x64	; 100
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 aa 00 	call	0x154	; 0x154 <wait>
			
		    PORTD = lights[var];
 132:	f8 01       	movw	r30, r16
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	8c 0f       	add	r24, r28
 13e:	9d 1f       	adc	r25, r29
 140:	e8 0f       	add	r30, r24
 142:	f9 1f       	adc	r31, r25
 144:	80 81       	ld	r24, Z
 146:	82 bb       	out	0x12, r24	; 18
		    var++;
 148:	0f 5f       	subi	r16, 0xFF	; 255
 14a:	1f 4f       	sbci	r17, 0xFF	; 255
		    
		    if (var>=0xff)
 14c:	0f 3f       	cpi	r16, 0xFF	; 255
 14e:	11 05       	cpc	r17, r1
 150:	54 f7       	brge	.-44     	; 0x126 <main+0x82>
 152:	eb cf       	rjmp	.-42     	; 0x12a <main+0x86>
