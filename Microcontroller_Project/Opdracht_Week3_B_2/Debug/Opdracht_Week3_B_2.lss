
Opdracht_Week3_B_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a6  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  000002d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000e65  00000000  00000000  0000032d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000008b9  00000000  00000000  00001192  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000437  00000000  00000000  00001a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c8  00000000  00000000  00001e84  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000032a  00000000  00000000  000021c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000024f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000022e  0000022e  000002a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000253c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000001da  000001da  0000024e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_strobe_lcd_e 00000026  00000146  00000146  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.init_4bits_mode 00000042  00000104  00000104  00000178  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_data 00000024  00000192  00000192  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_write_string 0000001a  00000214  00000214  00000288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_write_command 00000024  000001b6  000001b6  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_clear 00000026  0000016c  0000016c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .progmemx.data 0000000b  000000a4  000000a4  00000118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 21 .text.main    00000054  000000b0  000000b0  00000124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.libgcc  0000001c  000001f8  000001f8  0000026c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
   8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
   c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  10:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  14:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  18:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  1c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  20:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  24:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  28:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  2c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  30:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  34:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  38:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  3c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  40:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  44:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  48:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  4c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  50:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  54:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  58:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  5c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  60:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  64:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  68:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  6c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  70:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  74:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  78:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  7c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  80:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  84:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  88:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

0000022e <__bad_interrupt>:
 22e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.wait:

000001da <wait>:
clock value is set. This is used by _delay_ms inside
util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	08 c0       	rjmp	.+16     	; 0x1f0 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	ef ec       	ldi	r30, 0xCF	; 207
 1e2:	f7 e0       	ldi	r31, 0x07	; 7
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <wait+0xa>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <wait+0x10>
 1ea:	00 00       	nop
 1ec:	2f 5f       	subi	r18, 0xFF	; 255
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	28 17       	cp	r18, r24
 1f2:	39 07       	cpc	r19, r25
 1f4:	ac f3       	brlt	.-22     	; 0x1e0 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 1f6:	08 95       	ret

Disassembly of section .text.lcd_strobe_lcd_e:

00000146 <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
 146:	8b b3       	in	r24, 0x1b	; 27
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	8b bb       	out	0x1b, r24	; 27
 14c:	8f ec       	ldi	r24, 0xCF	; 207
 14e:	97 e0       	ldi	r25, 0x07	; 7
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_strobe_lcd_e+0xa>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_strobe_lcd_e+0x10>
 156:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTA &= ~(1<<LCD_E);  	// E low
 158:	8b b3       	in	r24, 0x1b	; 27
 15a:	8f 7b       	andi	r24, 0xBF	; 191
 15c:	8b bb       	out	0x1b, r24	; 27
 15e:	8f ec       	ldi	r24, 0xCF	; 207
 160:	97 e0       	ldi	r25, 0x07	; 7
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_strobe_lcd_e+0x1c>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_strobe_lcd_e+0x22>
 168:	00 00       	nop
 16a:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

00000104 <init_4bits_mode>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void init_4bits_mode(void) {
 104:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRD = 0xFF;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 10a:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 10c:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 10e:	1b ba       	out	0x1b, r1	; 27
	//PORTA = 0xFF;

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 110:	c0 e2       	ldi	r28, 0x20	; 32
 112:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 114:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 118:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 11a:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 122:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 126:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 128:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 12c:	80 ef       	ldi	r24, 0xF0	; 240
 12e:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 130:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 134:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 136:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_strobe_lcd_e>
	PORTC = 0x60;
 13a:	80 e6       	ldi	r24, 0x60	; 96
 13c:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 13e:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_strobe_lcd_e>
}
 142:	cf 91       	pop	r28
 144:	08 95       	ret

Disassembly of section .text.lcd_write_data:

00000192 <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 192:	cf 93       	push	r28
 194:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 196:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 198:	8b b3       	in	r24, 0x1b	; 27
 19a:	80 61       	ori	r24, 0x10	; 16
 19c:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 19e:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 1a2:	c2 95       	swap	r28
 1a4:	c0 7f       	andi	r28, 0xF0	; 240
 1a6:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 1a8:	8b b3       	in	r24, 0x1b	; 27
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1ae:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_strobe_lcd_e>
}
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

Disassembly of section .text.lcd_write_string:

00000214 <lcd_write_string>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_string(char *str) {
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 21a:	03 c0       	rjmp	.+6      	; 0x222 <lcd_write_string+0xe>
		lcd_write_data(*str);
 21c:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	88 81       	ld	r24, Y
 224:	81 11       	cpse	r24, r1
 226:	fa cf       	rjmp	.-12     	; 0x21c <lcd_write_string+0x8>
		lcd_write_data(*str);
	}
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

Disassembly of section .text.lcd_write_command:

000001b6 <lcd_write_command>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_command(unsigned char byte) {
 1b6:	cf 93       	push	r28
 1b8:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 1ba:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 1bc:	8b b3       	in	r24, 0x1b	; 27
 1be:	8f 7e       	andi	r24, 0xEF	; 239
 1c0:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1c2:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 1c6:	c2 95       	swap	r28
 1c8:	c0 7f       	andi	r28, 0xF0	; 240
 1ca:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 1cc:	8b b3       	in	r24, 0x1b	; 27
 1ce:	8f 7e       	andi	r24, 0xEF	; 239
 1d0:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1d2:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_strobe_lcd_e>
}
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

Disassembly of section .text.lcd_clear:

0000016c <lcd_clear>:


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_write_command>
 172:	8f e3       	ldi	r24, 0x3F	; 63
 174:	9c e9       	ldi	r25, 0x9C	; 156
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_clear+0xa>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_clear+0x10>
 17c:	00 00       	nop
	_delay_ms(20);
	lcd_write_command (0x80);						//Cursor terug naar start
 17e:	80 e8       	ldi	r24, 0x80	; 128
 180:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_write_command>
 184:	8f e1       	ldi	r24, 0x1F	; 31
 186:	9e e4       	ldi	r25, 0x4E	; 78
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_clear+0x1c>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_clear+0x22>
 18e:	00 00       	nop
 190:	08 95       	ret

Disassembly of section .text.main:

000000b0 <main>:
void lcd_write_data(unsigned char byte);
void lcd_write_cmd(unsigned char byte);
void lcd_clear(void);

int main(void)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	2b 97       	sbiw	r28, 0x0b	; 11
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF;			
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
  c8:	85 bb       	out	0x15, r24	; 21
	
	init_4bits_mode();
  ca:	0e 94 82 00 	call	0x104	; 0x104 <init_4bits_mode>
  ce:	8f e1       	ldi	r24, 0x1F	; 31
  d0:	9e e4       	ldi	r25, 0x4E	; 78
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x22>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x28>
  d8:	00 00       	nop
	
	_delay_ms(10);
		
	lcd_clear();
  da:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_clear>
	
	char temp[] = "What is up";
  de:	24 ea       	ldi	r18, 0xA4	; 164
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	8b e0       	ldi	r24, 0x0B	; 11
  e6:	f9 01       	movw	r30, r18
  e8:	de 01       	movw	r26, r28
  ea:	11 96       	adiw	r26, 0x01	; 1
  ec:	74 2f       	mov	r23, r20
  ee:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__movmemx_qi>
	lcd_write_string(temp);
  f2:	ce 01       	movw	r24, r28
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_write_string>
	
	while(1)
	{
		wait(10);
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 ed 00 	call	0x1da	; 0x1da <wait>
 102:	fb cf       	rjmp	.-10     	; 0xfa <main+0x4a>

Disassembly of section .text.libgcc:

000001f8 <__movmemx_qi>:
 1f8:	99 27       	eor	r25, r25

000001fa <__movmemx_hi>:
 1fa:	77 fd       	sbrc	r23, 7
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <__movmemx_hi+0x10>
 1fe:	7b bf       	out	0x3b, r23	; 59
 200:	07 90       	elpm	r0, Z+
 202:	0d 92       	st	X+, r0
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	e1 f7       	brne	.-8      	; 0x200 <__movmemx_hi+0x6>
 208:	08 95       	ret
 20a:	01 90       	ld	r0, Z+
 20c:	0d 92       	st	X+, r0
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	e1 f7       	brne	.-8      	; 0x20a <__movmemx_hi+0x10>
 212:	08 95       	ret
