
Opdracht_Week3_B_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000358  000003ec  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000090  00000000  00000000  0000041b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001316  00000000  00000000  000004ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000a43  00000000  00000000  000017c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000059d  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  000027a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000298  00000000  00000000  000028d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000414  00000000  00000000  00002b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  00002f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000352  00000352  000003e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_flush 00000026  0000022e  0000022e  000002c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.init    00000046  00000156  00000156  000001ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_write_command 00000024  00000254  00000254  000002e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.clear_display 0000001a  000002da  000002da  0000036e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_write_data 00000024  00000278  00000278  0000030c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.display_text 0000001a  000002f4  000002f4  00000388  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.wait    0000001e  000002bc  000002bc  00000350  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__vector_9 00000030  000001d0  000001d0  00000264  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.timer2Init 00000018  0000030e  0000030e  000003a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.setupLCD 0000002e  00000200  00000200  00000294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    00000066  000000f0  000000f0  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .data.CompareValue 00000002  00800100  00000356  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 25 .bss.tenthValue 00000002  00800102  00800102  000003ec  2**0
                  ALLOC
 26 .text.avrlibc 00000016  00000326  00000326  000003ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.avrlibc 00000016  0000033c  0000033c  000003d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.avrlibc 00000034  0000019c  0000019c  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.avrlibc 00000020  0000029c  0000029c  00000330  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
   8:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
   c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  10:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  14:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  18:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  1c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  20:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  24:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_9>
  28:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  2c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  30:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  34:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  38:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  3c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  40:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  44:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  48:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  4c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  50:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  54:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  58:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  5c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  60:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  64:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  68:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  6c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  70:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  74:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  78:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  7c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  80:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  84:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
  88:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	00 03       	mulsu	r16, r16
  92:	56 01       	movw	r10, r12
  94:	02 01       	movw	r0, r4
  96:	04 80       	ldd	r0, Z+4	; 0x04

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	ec e8       	ldi	r30, 0x8C	; 140
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	19 c0       	rjmp	.+50     	; 0xde <__do_clear_bss+0x8>
  ac:	b7 91       	elpm	r27, Z+
  ae:	a7 91       	elpm	r26, Z+
  b0:	37 91       	elpm	r19, Z+
  b2:	27 91       	elpm	r18, Z+
  b4:	07 91       	elpm	r16, Z+
  b6:	07 fd       	sbrc	r16, 7
  b8:	0e c0       	rjmp	.+28     	; 0xd6 <__do_clear_bss>
  ba:	97 91       	elpm	r25, Z+
  bc:	87 91       	elpm	r24, Z+
  be:	ef 01       	movw	r28, r30
  c0:	f9 2f       	mov	r31, r25
  c2:	e8 2f       	mov	r30, r24
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a2 17       	cp	r26, r18
  cc:	b3 07       	cpc	r27, r19
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x22>
  d0:	fe 01       	movw	r30, r28
  d2:	1b be       	out	0x3b, r1	; 59
  d4:	04 c0       	rjmp	.+8      	; 0xde <__do_clear_bss+0x8>

000000d6 <__do_clear_bss>:
  d6:	1d 92       	st	X+, r1
  d8:	a2 17       	cp	r26, r18
  da:	b3 07       	cpc	r27, r19
  dc:	e1 f7       	brne	.-8      	; 0xd6 <__do_clear_bss>
  de:	e8 39       	cpi	r30, 0x98	; 152
  e0:	f4 07       	cpc	r31, r20
  e2:	21 f7       	brne	.-56     	; 0xac <__do_copy_data+0x8>
  e4:	0e 94 78 00 	call	0xf0	; 0xf0 <_etext>
  e8:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>

Disassembly of section .text:

00000352 <__bad_interrupt>:
 352:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.lcd_flush:

0000022e <lcd_flush>:
void display_text(char *str);
void init(void);


void lcd_flush(void) {
	PORTA |= (1<<LCD_E);	// E high
 22e:	8b b3       	in	r24, 0x1b	; 27
 230:	80 64       	ori	r24, 0x40	; 64
 232:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	8f ec       	ldi	r24, 0xCF	; 207
 236:	97 e0       	ldi	r25, 0x07	; 7
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_flush+0xa>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_flush+0x10>
 23e:	00 00       	nop
	_delay_ms(1);			
	PORTA &= ~(1<<LCD_E);  	// E low
 240:	8b b3       	in	r24, 0x1b	; 27
 242:	8f 7b       	andi	r24, 0xBF	; 191
 244:	8b bb       	out	0x1b, r24	; 27
 246:	8f ec       	ldi	r24, 0xCF	; 207
 248:	97 e0       	ldi	r25, 0x07	; 7
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_flush+0x1c>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_flush+0x22>
 250:	00 00       	nop
 252:	08 95       	ret

Disassembly of section .text.init:

00000156 <init>:
	_delay_ms(2);
	lcd_write_command (0x80);	//Cursor terug naar start
	//lcd_flush();
}

void init() {
 156:	cf 93       	push	r28
	DDRC = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 15c:	85 bb       	out	0x15, r24	; 21
	// PORTC output mode and all low (also E and RS pin)
	DDRD = 0xFF;
 15e:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 160:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 162:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 164:	1b ba       	out	0x1b, r1	; 27
	//PORTA = 0xFF;

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 166:	c0 e2       	ldi	r28, 0x20	; 32
 168:	c5 bb       	out	0x15, r28	; 21
	lcd_flush();
 16a:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_flush>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 16e:	c5 bb       	out	0x15, r28	; 21
	lcd_flush();
 170:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_flush>
	PORTC = 0x80;
 174:	80 e8       	ldi	r24, 0x80	; 128
 176:	85 bb       	out	0x15, r24	; 21
	lcd_flush();
 178:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_flush>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 17c:	15 ba       	out	0x15, r1	; 21
	lcd_flush();
 17e:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_flush>
	PORTC = 0xF0;
 182:	80 ef       	ldi	r24, 0xF0	; 240
 184:	85 bb       	out	0x15, r24	; 21
	lcd_flush();
 186:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_flush>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 18a:	15 ba       	out	0x15, r1	; 21
	lcd_flush();
 18c:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_flush>
	PORTC = 0x60;
 190:	80 e6       	ldi	r24, 0x60	; 96
 192:	85 bb       	out	0x15, r24	; 21
	lcd_flush();
 194:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_flush>
}
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

Disassembly of section .text.lcd_write_command:

00000254 <lcd_write_command>:
	for(;*str; str++){
		lcd_write_data(*str);
	}
}

void lcd_write_command(unsigned char byte) {
 254:	cf 93       	push	r28
 256:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 258:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 25a:	8b b3       	in	r24, 0x1b	; 27
 25c:	8f 7e       	andi	r24, 0xEF	; 239
 25e:	8b bb       	out	0x1b, r24	; 27
	lcd_flush();
 260:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_flush>

	// Second nibble
	PORTC = (byte<<4);
 264:	c2 95       	swap	r28
 266:	c0 7f       	andi	r28, 0xF0	; 240
 268:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 26a:	8b b3       	in	r24, 0x1b	; 27
 26c:	8f 7e       	andi	r24, 0xEF	; 239
 26e:	8b bb       	out	0x1b, r24	; 27
	lcd_flush();
 270:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_flush>
}
 274:	cf 91       	pop	r28
 276:	08 95       	ret

Disassembly of section .text.clear_display:

000002da <clear_display>:
	PORTA &= ~(1<<LCD_E);  	// E low
	_delay_ms(1);					
}

void clear_display() {
	lcd_write_command (0x01);						//Leeg display
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_write_command>
 2e0:	8f e9       	ldi	r24, 0x9F	; 159
 2e2:	9f e0       	ldi	r25, 0x0F	; 15
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <clear_display+0xa>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <clear_display+0x10>
 2ea:	00 00       	nop
	//lcd_flush();
	_delay_ms(2);
	lcd_write_command (0x80);	//Cursor terug naar start
 2ec:	80 e8       	ldi	r24, 0x80	; 128
 2ee:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_write_command>
 2f2:	08 95       	ret

Disassembly of section .text.lcd_write_data:

00000278 <lcd_write_data>:
	PORTC = (byte<<4);
	PORTA &= ~(1<<LCD_RS);
	lcd_flush();
}

void lcd_write_data(unsigned char byte) {
 278:	cf 93       	push	r28
 27a:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 27c:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 27e:	8b b3       	in	r24, 0x1b	; 27
 280:	80 61       	ori	r24, 0x10	; 16
 282:	8b bb       	out	0x1b, r24	; 27
	lcd_flush();
 284:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_flush>

	// Second nibble
	PORTC = (byte<<4);
 288:	c2 95       	swap	r28
 28a:	c0 7f       	andi	r28, 0xF0	; 240
 28c:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 28e:	8b b3       	in	r24, 0x1b	; 27
 290:	80 61       	ori	r24, 0x10	; 16
 292:	8b bb       	out	0x1b, r24	; 27
	lcd_flush();
 294:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_flush>
}
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

Disassembly of section .text.display_text:

000002f4 <display_text>:
	lcd_flush();
}



void display_text(char *str){
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	ec 01       	movw	r28, r24
	for(;*str; str++){
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <display_text+0xe>
		lcd_write_data(*str);
 2fc:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_write_data>
}



void display_text(char *str){
	for(;*str; str++){
 300:	21 96       	adiw	r28, 0x01	; 1
 302:	88 81       	ld	r24, Y
 304:	81 11       	cpse	r24, r1
 306:	fa cf       	rjmp	.-12     	; 0x2fc <display_text+0x8>
		lcd_write_data(*str);
	}
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

Disassembly of section .text.wait:

000002bc <wait>:
#define BIT(x)			(1 << (x))

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms ) {
	for (int tms=0; tms<ms; tms++) {
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <wait+0x16>
 2c2:	ef ec       	ldi	r30, 0xCF	; 207
 2c4:	f7 e0       	ldi	r31, 0x07	; 7
 2c6:	31 97       	sbiw	r30, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <wait+0xa>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <wait+0x10>
 2cc:	00 00       	nop
 2ce:	2f 5f       	subi	r18, 0xFF	; 255
 2d0:	3f 4f       	sbci	r19, 0xFF	; 255
 2d2:	28 17       	cp	r18, r24
 2d4:	39 07       	cpc	r19, r25
 2d6:	ac f3       	brlt	.-22     	; 0x2c2 <wait+0x6>
		_delay_ms( 1 );			// library function (max 30 ms at 8MHz)
	}
}
 2d8:	08 95       	ret

Disassembly of section .text.__vector_9:

000001d0 <__vector_9>:

volatile int tenthValue = 0;
volatile int CompareValue = 100;

ISR( TIMER2_COMP_vect ) {
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
	TCNT2 = 0;			// Preset value
 1de:	14 bc       	out	0x24, r1	; 36
	tenthValue++;		// Increment counter
 1e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tenthValue>
 1e4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <tenthValue+0x1>
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <tenthValue+0x1>
 1ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tenthValue>
	}
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

Disassembly of section .text.timer2Init:

0000030e <timer2Init>:

// Initialize timer2
void timer2Init( void ) {
	OCR2 = CompareValue;		// Compare value of counter 2
 30e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 312:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 316:	83 bd       	out	0x23, r24	; 35
	TIMSK |= BIT(7);			// T2 compare match interrupt enable
 318:	87 b7       	in	r24, 0x37	; 55
 31a:	80 68       	ori	r24, 0x80	; 128
 31c:	87 bf       	out	0x37, r24	; 55
	sei();					// turn_on intr all
 31e:	78 94       	sei
	TCCR2 = 0b00000111;		// Initialize T2: ext.counting, rising edge, compare output mode, CTC, RUN
 320:	87 e0       	ldi	r24, 0x07	; 7
 322:	85 bd       	out	0x25, r24	; 37
 324:	08 95       	ret

Disassembly of section .text.setupLCD:

00000200 <setupLCD>:

}

void setupLCD(){
	init();
 200:	0e 94 ab 00 	call	0x156	; 0x156 <init>
 204:	8f e1       	ldi	r24, 0x1F	; 31
 206:	9e e4       	ldi	r25, 0x4E	; 78
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <setupLCD+0x8>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <setupLCD+0xe>
 20e:	00 00       	nop
	
	//wait(10);
	_delay_ms(10);
	
	clear_display();
 210:	0e 94 6d 01 	call	0x2da	; 0x2da <clear_display>
 214:	8f e3       	ldi	r24, 0x3F	; 63
 216:	9c e9       	ldi	r25, 0x9C	; 156
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <setupLCD+0x18>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <setupLCD+0x1e>
 21e:	00 00       	nop
 220:	8f e3       	ldi	r24, 0x3F	; 63
 222:	9c e9       	ldi	r25, 0x9C	; 156
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <setupLCD+0x24>
 228:	00 c0       	rjmp	.+0      	; 0x22a <setupLCD+0x2a>
 22a:	00 00       	nop
 22c:	08 95       	ret

Disassembly of section .text.main:

000000f0 <main>:

	
	_delay_ms(20);
}

int main(void) {
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	1f 92       	push	r1
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
	
	int number = 0;
	char text[1];
	setupLCD();
  fa:	0e 94 00 01 	call	0x200	; 0x200 <setupLCD>
	
	DDRD &= ~BIT(7);			// set PORTD.7 for input
  fe:	81 b3       	in	r24, 0x11	; 17
 100:	8f 77       	andi	r24, 0x7F	; 127
 102:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;				// set PORTB for output (shows countregister)
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;				// set PORTC for output (shows tenth value)
 108:	87 bb       	out	0x17, r24	; 23
	timer2Init();
 10a:	0e 94 87 01 	call	0x30e	; 0x30e <timer2Init>
	_delay_ms(20);
}

int main(void) {
	
	int number = 0;
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	10 e0       	ldi	r17, 0x00	; 0
	DDRB = 0xFF;				// set PORTC for output (shows tenth value)
	timer2Init();

	while (1) {
		//PORTA = TCNT2;		// show value counter 2
		if (number != TCNT2)
 112:	84 b5       	in	r24, 0x24	; 36
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	08 17       	cp	r16, r24
 118:	19 07       	cpc	r17, r25
 11a:	d9 f3       	breq	.-10     	; 0x112 <main+0x22>
		{
		number = TCNT2;	// show value tenth counter
 11c:	04 b5       	in	r16, 0x24	; 36
 11e:	10 e0       	ldi	r17, 0x00	; 0
		wait(10);			// every 10 ms
 120:	8a e0       	ldi	r24, 0x0A	; 10
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 5e 01 	call	0x2bc	; 0x2bc <wait>
		
			clear_display();
 128:	0e 94 6d 01 	call	0x2da	; 0x2da <clear_display>

			itoa(number, text, 10);
 12c:	4a e0       	ldi	r20, 0x0A	; 10
 12e:	50 e0       	ldi	r21, 0x00	; 0
 130:	be 01       	movw	r22, r28
 132:	6f 5f       	subi	r22, 0xFF	; 255
 134:	7f 4f       	sbci	r23, 0xFF	; 255
 136:	c8 01       	movw	r24, r16
 138:	0e 94 93 01 	call	0x326	; 0x326 <itoa>
			wait( 250 );
 13c:	8a ef       	ldi	r24, 0xFA	; 250
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 5e 01 	call	0x2bc	; 0x2bc <wait>
			display_text(text);
 144:	ce 01       	movw	r24, r28
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <display_text>
			wait( 250 );
 14c:	8a ef       	ldi	r24, 0xFA	; 250
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 5e 01 	call	0x2bc	; 0x2bc <wait>
 154:	de cf       	rjmp	.-68     	; 0x112 <main+0x22>

Disassembly of section .text.avrlibc:

00000326 <itoa>:
 326:	45 32       	cpi	r20, 0x25	; 37
 328:	51 05       	cpc	r21, r1
 32a:	20 f4       	brcc	.+8      	; 0x334 <itoa+0xe>
 32c:	42 30       	cpi	r20, 0x02	; 2
 32e:	10 f0       	brcs	.+4      	; 0x334 <itoa+0xe>
 330:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__itoa_ncheck>
 334:	fb 01       	movw	r30, r22
 336:	10 82       	st	Z, r1
 338:	cb 01       	movw	r24, r22
 33a:	08 95       	ret

Disassembly of section .text.avrlibc:

0000033c <__itoa_ncheck>:
 33c:	bb 27       	eor	r27, r27
 33e:	4a 30       	cpi	r20, 0x0A	; 10
 340:	31 f4       	brne	.+12     	; 0x34e <__itoa_ncheck+0x12>
 342:	99 23       	and	r25, r25
 344:	22 f4       	brpl	.+8      	; 0x34e <__itoa_ncheck+0x12>
 346:	bd e2       	ldi	r27, 0x2D	; 45
 348:	90 95       	com	r25
 34a:	81 95       	neg	r24
 34c:	9f 4f       	sbci	r25, 0xFF	; 255
 34e:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__utoa_common>

Disassembly of section .text.avrlibc:

0000019c <__utoa_ncheck>:
 19c:	bb 27       	eor	r27, r27

0000019e <__utoa_common>:
 19e:	fb 01       	movw	r30, r22
 1a0:	55 27       	eor	r21, r21
 1a2:	aa 27       	eor	r26, r26
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	aa 1f       	adc	r26, r26
 1aa:	a4 17       	cp	r26, r20
 1ac:	10 f0       	brcs	.+4      	; 0x1b2 <__utoa_common+0x14>
 1ae:	a4 1b       	sub	r26, r20
 1b0:	83 95       	inc	r24
 1b2:	50 51       	subi	r21, 0x10	; 16
 1b4:	b9 f7       	brne	.-18     	; 0x1a4 <__utoa_common+0x6>
 1b6:	a0 5d       	subi	r26, 0xD0	; 208
 1b8:	aa 33       	cpi	r26, 0x3A	; 58
 1ba:	08 f0       	brcs	.+2      	; 0x1be <__utoa_common+0x20>
 1bc:	a9 5d       	subi	r26, 0xD9	; 217
 1be:	a1 93       	st	Z+, r26
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	79 f7       	brne	.-34     	; 0x1a2 <__utoa_common+0x4>
 1c4:	b1 11       	cpse	r27, r1
 1c6:	b1 93       	st	Z+, r27
 1c8:	11 92       	st	Z+, r1
 1ca:	cb 01       	movw	r24, r22
 1cc:	0c 94 4e 01 	jmp	0x29c	; 0x29c <strrev>

Disassembly of section .text.avrlibc:

0000029c <strrev>:
 29c:	dc 01       	movw	r26, r24
 29e:	fc 01       	movw	r30, r24
 2a0:	67 2f       	mov	r22, r23
 2a2:	71 91       	ld	r23, Z+
 2a4:	77 23       	and	r23, r23
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <strrev+0x4>
 2a8:	32 97       	sbiw	r30, 0x02	; 2
 2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <strrev+0x18>
 2ac:	7c 91       	ld	r23, X
 2ae:	6d 93       	st	X+, r22
 2b0:	70 83       	st	Z, r23
 2b2:	62 91       	ld	r22, -Z
 2b4:	ae 17       	cp	r26, r30
 2b6:	bf 07       	cpc	r27, r31
 2b8:	c8 f3       	brcs	.-14     	; 0x2ac <strrev+0x10>
 2ba:	08 95       	ret
